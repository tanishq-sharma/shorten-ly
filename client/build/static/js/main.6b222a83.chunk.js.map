{"version":3,"sources":["logo.png","config.js","components/Form1.js","actions/postURL.js","components/copyurl.js","components/UrlForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","process","PORT","Form1","onsubmit","className","onSubmit","id","placeholder","type","defaultValue","urls","callback","a","axios","method","url","headers","data","longURL","then","response","code","Post","CopyUrl","props","useState","copySuccess","setCopySuccess","textAreaRef","useRef","ref","value","document","queryCommandSupported","onClick","e","current","select","execCommand","target","focus","pattern","UrlForm","shorturl","setshorturl","message","setmessage","event","preventDefault","toLowerCase","test","err","Url_service","src","logos","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,+FCA3CD,EAAOC,QAAU,CACb,KAAQ,oBAAoBC,mHAAYC,KAAK,M,wHCelCC,EAbD,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACd,OACE,yBAAKC,UAAU,iBACf,0BAAMC,SAAYF,GAClB,2BAAOG,GAAG,MAAMF,UAAU,QAAQG,YAAY,gBAC9C,2BAAOC,KAAO,SAASF,GAAK,MAAMF,UAAY,WAC9C,2BAAOI,KAAK,QAAQJ,UAAY,SAASK,aAAa,a,6DCL1D,WAAqBC,EAAOC,GAA5B,SAAAC,EAAA,sDACeZ,mHAAYC,MAAQ,IACjCY,IAAM,CACJC,OAAQ,OACRC,IAAI,OACJC,QAAS,GACTC,KAAM,CACJC,QAASR,KAEVS,MAAK,SAAAC,GACN,IAAMC,EAAOD,EAASH,KACtBN,EAAS,KAAKU,MAXlB,4C,sBAiBeC,M,8CCjBA,SAASC,EAAQC,GAAQ,IAAD,EAECC,mBAAS,IAFV,mBAE9BC,EAF8B,KAEjBC,EAFiB,KAG/BC,EAAcC,iBAAO,MAS3B,OACE,6BAEA,8BACE,8BAAUzB,UAAU,QAClB0B,IAAKF,EACLG,MAAOP,EAAMT,OAKdiB,SAASC,sBAAsB,SAC9B,6BACE,4BAAQ7B,UAAY,SAAS8B,QApBrC,SAAyBC,GACvBP,EAAYQ,QAAQC,SACpBL,SAASM,YAAY,QACrBH,EAAEI,OAAOC,QACTb,EAAe,gCAgBT,QACCD,I,UCzBPe,EAAU,2BAqCCC,EAjCC,WAAM,IAAD,EACUjB,mBAAS,IADnB,mBACdkB,EADc,KACLC,EADK,OAEQnB,mBAAS,IAFjB,mBAEdoB,EAFc,KAENC,EAFM,iDAIrB,WAA6BC,GAA7B,eAAAnC,EAAA,yDAEMmC,EAAMC,iBAERjC,GADMA,EAAMgC,EAAMR,OAAOxB,IAAIgB,OAClBkB,eACNR,EAAQS,KAAKnC,GALtB,uBAMQ+B,EAAW,IANnB,SAOUxB,EAAKP,GAAI,SAACoC,EAAI9B,GAClBuB,EAAY,oCAAoCvB,EAAI,cAR1D,8BAYIyB,EAAW,0DAZf,6CAJqB,sBAuBjB,OACE,6BACF,kBAAC,EAAD,CAAM3C,SAzBW,8CA2BpB0C,EACD,kBAACtB,EAAD,CAASR,IAAO4B,M,iBCPDS,MAxBf,WACE,OACE,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,cAExB,uBAAGA,UAAY,WAAf,aAEU,uBAAGA,UAAY,KAAf,2BAMJ,yBAAKA,UAAY,WAAUiD,IAAKC,IAAOC,IAAI,SAE/C,kBAAC,EAAD,CAASnD,UAAY,QAArB,QCTkBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1B,c","file":"static/js/main.6b222a83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.675dcfad.png\";","module.exports = {\n    'Host': 'http://localhost:'+process.env.PORT+'/',\n}\n","import React from 'react'\n\n\nconst Form1 = ({onsubmit}) =>{\n  return (\n    <div className=\"Input_wrapper\">\n    <form onSubmit = {onsubmit}>\n    <input id=\"url\" className=\"field\" placeholder=\"Website URL\" />\n    <input type = \"submit\" id = \"get\" className = \"button\" />\n    <input type=\"reset\" className = \"button\" defaultValue=\"Reset\" />\n    </form>\n      </div>\n  );\n}\n\n\nexport default Form1;\n","import axios from 'axios'\n\n\n\nasync function Post (urls , callback) {\n  const Port = process.env.PORT || 7000;\n  axios({\n    method: 'post',\n    url: `/api`,\n    headers: {},\n    data: {\n      longURL: urls,\n    }\n  }).then(response =>{\n    const code = response.data\n    callback(null,code);\n  });\n\n}\n\n\nexport default Post;\n","import React, { useRef, useState } from 'react';\n\n\n\nexport default function CopyUrl(props) {\n\n  const [copySuccess, setCopySuccess] = useState('');\n  const textAreaRef = useRef(null);\n\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    setCopySuccess('Copied to your clipboard !');\n  };\n\n  return (\n    <div >\n\n    <form>\n      <textarea className=\"field\"\n        ref={textAreaRef}\n        value={props.url}\n      />\n    </form>\n\n      {\n       document.queryCommandSupported('copy') &&\n        <div >\n          <button className = \"button\" onClick={copyToClipboard}>Copy</button>\n          {copySuccess}\n        </div>\n      }\n\n    </div>\n  );\n}\n","import React,{useState} from \"react\";\nimport Form from './Form1'\nimport Post from '../actions/postURL'\nimport CopyUrl from './copyurl'\nimport config from '../config'\nvar pattern = /^((http|https|ftp):\\/\\/)/;\n\n\n\nconst UrlForm = () =>{\nconst [shorturl,setshorturl] = useState('');\nconst [message,setmessage] = useState('');\n\nasync function SubmitHandler(event) {\n\n      event.preventDefault();\n      var url = event.target.url.value;\n    url =  url.toLowerCase();\n      if(pattern.test(url)) {\n        setmessage('');\n    await Post(url,(err,code)=>{\n      setshorturl('https://shorten-ly.herokuapp.com/'+code['shortCode']);\n    })\n\n  }else {\n    setmessage('please enter website starting with http:// or https://');\n  }\n}\n\n\n\n\n    return (\n      <div>\n    <Form onsubmit = {SubmitHandler}\n></Form>\n{message}\n<CopyUrl url = {shorturl}></CopyUrl>\n      </div>\n    );\n}\n\nexport default UrlForm;\n","import React from 'react';\nimport './App.css';\nimport UrlForm from './components/UrlForm'\nimport logos from './logo.png'\n\n\nfunction Url_service() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n<p className = \"Heading\">\n          Shorten-ly\n          <t className = \"H\">\n                  URL shortening service \n          </t>\n\n</p>\n\n      <img className = \"App-logo\"src={logos} alt=\"logo\" />\n\n  <UrlForm className = \"Copy\" > </UrlForm>\n\n      </header>\n\n\n    </div>\n  );\n}\n\nexport default Url_service;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}